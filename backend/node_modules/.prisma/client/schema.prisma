datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  plan         String // "saas" ou "saas+site"
  domain       String? // Ex: academiax.edupay.com ou custom
  siteData     Json? // Dados para site público (ex: { title: "", description: "" })
  createdAt    DateTime      @default(now())
  users        User[]
  alunos       Aluno[]
  mensalidades Mensalidade[]

  @@index([slug]) // Índice para buscas rápidas por slug
}

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String // Hash com bcrypt
  role         String // "ADMIN" ou "ALUNO"
  tenantId     String?
  tenant       Tenant?  @relation(fields: [tenantId], references: [id])
  createdAt    DateTime @default(now())

  @@index([email]) // Índice para buscas rápidas por email
}

model Aluno {
  id           String        @id @default(cuid())
  name         String
  birthDate    DateTime?
  responsible  String?
  tenantId     String
  tenant       Tenant        @relation(fields: [tenantId], references: [id])
  mensalidades Mensalidade[]
  createdAt    DateTime      @default(now())

  @@index([tenantId]) // Índice para filtrar alunos por tenant
}

model Mensalidade {
  id         String   @id @default(cuid())
  alunoId    String
  tenantId   String
  valor      Float
  vencimento DateTime
  status     String   @default("PENDENTE")
  aluno      Aluno    @relation(fields: [alunoId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  createdAt  DateTime @default(now())

  @@index([tenantId, alunoId]) // Índice composto para buscas por tenant e aluno
}
